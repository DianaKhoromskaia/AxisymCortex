function [sint, Vint, P, sol, vs, dsvs, vn, dsvn, mss, tns, ds2vn, dV, dX0, Lnew, eps1new, sfun, snewfun, snewvec, sfunEu, snewfunEu, snewvecEu] = forcebalance_t0(C1, C2, C, dsC, Psi, X, Z, X0, L, zeta, dszeta, eta, etab, etac, etacb, eps1, eps1abs, xintegral, fext, kappa, C0, P0, optode, npoints, delt, xi)
% This function solves the force balance for an active viscous surface at
% time t=0. The initial guess for the solver is generated by solving for 
% a profile with 1/10 of the magnitude first. 
% L -- perimeter length of half of the surface

%% solve forcebalance with 1/10 of the values of tension and external forces to obtain good initial guess
    
    sgrid = linspace(0., L, npoints); % initial guess for solver grid
    parguess = [P0]; % initial guess for free parameters
    
    factor = 0.01;
    solinit = bvpinit(sgrid, zeros(11,1), factor*parguess); % initial guess structure for solution
    
    sgridinterm = linspace(0, L, npoints);
    zetainterm = griddedInterpolant(sgridinterm, factor*zeta(sgridinterm), 'spline');
    dszetainterm = griddedInterpolant(sgridinterm, factor*dszeta(sgridinterm), 'spline');
    fextinterm = griddedInterpolant(sgridinterm, factor*fext(sgridinterm), 'spline');
    
    solinterm = bvp4c( @ode, ...
        @bc, ...
        solinit,optode, C1, C2, C, dsC, Psi, X, Z, X0, L, zetainterm, dszetainterm, eta, etab, etac, etacb, eps1, xintegral, fextinterm, kappa, C0, delt, xi);
    
%% solve force balance with true values of tension and external forces with intermediate solution 'solinterm' as initial guess

    parguess = solinterm.parameters/factor; % initial guess for free parameters
    solinit = bvpinit(solinterm.x, @yguessfun_initial, parguess, solinterm, 1./factor); % initial guess structure for solution
    
    sol = bvp4c( @ode, ...
        @bc, ...
        solinit,optode, C1, C2, C, dsC, Psi, X, Z, X0, L, zeta, dszeta, eta, etab, etac, etacb, eps1, xintegral, fext, kappa, C0, delt, xi);
    
    sint = sol.x; % solver grid
    Vint = sol.y; % solution array
    derivatives = sol.yp; % array of derivatives
    P = sol.parameters;
    dV = sol.y(7,end);
    dX0 = sol.y(8,end);
    
%plot solution:
%     figure(5)
%     plot(sol.x, sol.y, 'o-')
%     legend('vs','dsvs','vn','dsvn','mss','tns', 'dV', 'dX0','s0-s','I_1');

%% saving new arc lengths on half interval
    % new arc length for Lagrange update:
    Lnew = L + delt*Vint(9,end);
    eps1new = eps1abs*Lnew;
    
    sfun = griddedInterpolant( [0. sint(2:(end-1))+delt*Vint(9,2:(end-1)) Lnew], [0. sint(2:(end-1)) L], 'spline');
    snewfun = griddedInterpolant( [0. sint(2:(end-1)) L], [0. sint(2:(end-1))+delt*Vint(9,2:(end-1)) Lnew], 'spline');
    snewvec = [0. sint(2:(end-1))+delt*Vint(9,2:(end-1)) Lnew];
    
    % new arc length for Euler update: (used for active tension profile)
    LnewEu = L + delt*Vint(11,end);
    
    sfunEu = griddedInterpolant( [0. sint(2:(end-1))+delt*Vint(11,2:(end-1)) LnewEu], [0. sint(2:(end-1)) L], 'spline');
    snewfunEu = griddedInterpolant( [0. sint(2:(end-1)) L], [0. sint(2:(end-1))+delt*Vint(11,2:(end-1)) LnewEu], 'spline');
    snewvecEu = [0. sint(2:(end-1))+delt*Vint(11,2:(end-1)) LnewEu];
    
%% interpolants of flow field and derivatives, tensions, and bending moments on half interval:
    vs = griddedInterpolant(sint, Vint(1,:), 'spline');
    dsvs = griddedInterpolant(sint, Vint(2,:) , 'spline');
    vn = griddedInterpolant(sint, Vint(3,:) , 'spline');
    dsvn = griddedInterpolant(sint, Vint(4,:) , 'spline');
    mss = griddedInterpolant(sint, Vint(5,:), 'spline');
    tns = griddedInterpolant(sint, Vint(6,:), 'spline');
    
    ds2vn = griddedInterpolant(sint, derivatives(4,:), 'spline');

end

